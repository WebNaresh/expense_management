---
description: 
globs: 
alwaysApply: true
---
# Library Management System - Coding Conventions

## TypeScript
- Use TypeScript for all new code
- Define interfaces and types in [types/](mdc:types) directory
- Use explicit typing when type inference is not clear
- Always use declared variables or remove them if unused
- Remove unused function parameters to avoid TypeScript/ESLint warnings
- Prefer destructuring of parameters and objects when appropriate

## Component Structure
- Create functional components using TypeScript
- Use Next.js' App Router conventions
- Organize components by feature and reusability

## Styling
- Use Tailwind CSS for styling
- Component-specific styles should be co-located with the component
- Follow the shadcn/ui pattern for component customization
- Always leverage shadcn theme colors through CSS variables (e.g., `--primary`, `--foreground`) for consistency
- Create visually engaging interfaces with multiple Lucide React icons
- Design modern UIs with attention to spacing, alignment, and visual hierarchy

## JSX Syntax
- Always escape special characters in JSX text content:
  - Use `&apos;` for apostrophes (') 
  - Use `&quot;` for quotation marks (")
  - Use `&amp;` for ampersands (&)
  - Use `&lt;` and `&gt;` for angle brackets (< >)
- Never use direct unescaped special characters in JSX text - even in props like `answer`, `description`, or other string content
- Run linting checks before committing to catch unescaped entity errors
- When fixing ESLint errors, ensure all similar instances are fixed, not just the reported ones
- Use self-closing tags for elements without children (`<Component />`)
- Use fragment shorthand (`<>...</>`) instead of `<React.Fragment>`
- Add proper `key` props to elements in arrays using unique, stable identifiers

## State Management
- Use Zustand for global client state
- Use React Query for server state and data fetching
- Form state should use React Hook Form with Zod for validation

## Data Fetching & Mutations
- Always use Axios for API requests
- Use React Query's useQuery hook for data fetching
- Use React Query's useMutation hook for data mutations
- Always invalidate related queries after successful mutations
- Structure query keys consistently for proper cache management

## Form Handling
- Use React Hook Form for all form state management
- Integrate Zod schemas with React Hook Form for validation
- Define reusable Zod schemas in separate files for complex validations

## Browser Storage
- Always use `useCookies` from `next-client-cookies` for cookie management
- Set cookie options consistently (`path: '/'`, `sameSite: 'lax'`, `secure: process.env.NODE_ENV === 'production'`)
- Use cookies for preferences and small session data
- Use localStorage for larger client-side data when appropriate

## Notifications
- Always use react-hot-toast for toast notifications
- Prefer toast.success(), toast.error(), and toast.loading() for appropriate states
- Keep toast messages concise and descriptive
- For form submissions, show success/error toasts after the operation completes
- Do not use other toast libraries (such as sonner or react-toastify)

## CLI Commands
- Always use yarn instead of npm for package management and running scripts
- Use `yarn add` instead of `npm install` for adding dependencies
- Use `yarn dev` instead of `npm run dev` for development
- Use `yarn build` instead of `npm run build` for production builds
- Use `yarn start` instead of `npm start` for running the production server

## Error Handling
- Use try/catch blocks for error handling
- Always provide user-friendly error messages
- Log errors appropriately

## Client-Side Providers and Wrappers
- Always use `provider/application.wrapper.tsx` for all client-side providers and wrappers
- Never create separate provider files - consolidate all providers in the application wrapper
- The application wrapper should handle:
  - React Query Provider
  - NextAuth SessionProvider
  - Any global state providers (Zustand)
  - Any theme providers
  - Any other client-side context providers
- Follow the existing pattern in application.wrapper.tsx for adding new providers
- Maintain proper TypeScript types for the wrapper props

# 07-editing-policy

**Rule:**
Whenever a user request involves a code or UI change, the assistant must directly edit the relevant file(s) in the codebase, rather than only providing code suggestions or asking for permission to edit.
- The assistant should only provide suggestions or ask for confirmation if the user explicitly requests it, or if the change is potentially destructive or ambiguous.
- For all other cases, the assistant should make the necessary edits directly and inform the user of the changes made.