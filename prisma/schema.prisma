// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  name             String
  email            String         @unique
  whatsappVerified Boolean        @default(false)
  whatsappNumber   String?        @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  givenLoans       LoanModel[]    @relation("GivenLoans")
  receivedLoans    LoanModel[]    @relation("ReceivedLoans")
  subscriptions    Subscription[]
  tasks            Task[]

  @@unique([whatsappNumber, email])
  @@index([email])
  @@index([whatsappNumber])
  @@index([name])
}

model LoanModel {
  id         String   @id @default(uuid())
  name       String?
  amount     Int
  fromUser   User     @relation("GivenLoans", fields: [fromUserId], references: [id])
  fromUserId String
  toUser     User     @relation("ReceivedLoans", fields: [toUserId], references: [id])
  toUserId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Subscription {
  id                 String                    @id @default(uuid())
  name               String
  amount             Int
  renewalDate        DateTime
  currency           AppCurrency
  renewInterval      SubscriptionRenewInterval @default(MONTHLY)
  hasVariableCharges Boolean                   @default(false)
  isActive           Boolean                   @default(true)
  userId             String
  user               User                      @relation(fields: [userId], references: [id])
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
}

model Task {
  id          String   @id @default(uuid())
  name        String
  description String
  dueDate     DateTime
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

enum AppCurrency {
  INR
  USD
  EUR
  GBP
}

enum SubscriptionRenewInterval {
  MONTHLY
  YEARLY
  QUARTERLY
  HALF_YEARLY
}
